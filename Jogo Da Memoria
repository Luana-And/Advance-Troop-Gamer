final int cols = 4;  
final int rows = 4; 
final int cardSize = 100;  
final int telaLargura = 600;
final int telaAltura = 500;

int offsetX = (telaLargura - cols * cardSize) / 2;
int offsetY = (telaAltura - rows * cardSize) / 2;

String[] values;  
String[][] board = new String[cols][rows]; 
boolean[][] revealed = new boolean[cols][rows];  
int botaoX = 0;
int botaoY = 0;
int botaoLargura = 200;
int botaoAltura = 50;

int[] firstPick = {-1, -1};  
int[] secondPick = {-1, -1};  
boolean checking = false;  
int checkTime;  
int matches = 0;  
int totalPairs = (cols * rows) / 2;  
boolean mostrandoHistoria = true;

String historia =  
  "Há muito tempo, um feiticeiro excêntrico tentou criar um feitiço de alegria eterna...\n" +
  "Mas algo deu errado, e ele acabou aprisionando centenas de emojis mágicos dentro de cartas encantadas.\n\n" +
  "Esses emojis — sorridentes, estressados, dançarinos, comedores de pizza —\n" +
  "ficaram embaralhados em um tabuleiro misterioso.\n\n" +
  "Agora, só há uma maneira de quebrar o feitiço:\n" +
  "descobrir todos os pares de emojis antes que o tabuleiro se feche para sempre.\n\n" +
  "Você é o herói desta jornada, o último leitor do feitiço...\n" +
  "Com olhos atentos e memória afiada, você pode libertá-los.\n\n" +
  "O desafio começa agora.";

void settings() {
  size(telaLargura, telaAltura);  
}

void setup() {
  values = generateValues();  
  fillBoard();  
}

void draw() {
  background(173, 216,230);

  if (mostrandoHistoria) {
    mostrarHistoria();
    return;
  }

  drawBoard();  

  if (checking && millis() - checkTime > 1000) {
    checkMatch();  
    checking = false;
  }

  if (matches == totalPairs) {
    fill(0, 200, 0);
    textSize(32);
    textAlign(CENTER, CENTER);
    text("Parabéns!", width / 2, height / 2 - 40);

    botaoX = width / 2 - botaoLargura / 2;
    botaoY = height / 2 + 10;

    fill(50, 150, 250);
    rect(botaoX, botaoY, botaoLargura, botaoAltura, 10);

    fill(255);
    textSize(20);
    text("Reiniciar", width / 2, botaoY + botaoAltura / 2);

    noLoop();
  }
}

void mostrarHistoria() {
  fill(0);
  textSize(18);
  textAlign(LEFT, TOP);
  textLeading(28);
  text(historia, 20, 20, width - 40, height - 40);

  fill(50, 100, 200);
  textSize(20);
  textAlign(CENTER, BOTTOM);
  text("Clique para começar...", width / 2, height - 20);
}

void mousePressed() {
  if (matches == totalPairs) {
    if (mouseX > botaoX && mouseX < botaoX + botaoLargura &&
        mouseY > botaoY && mouseY < botaoY + botaoAltura) {
      reiniciarJogo();
      return;
    }
  }

  if (mostrandoHistoria) {
    mostrandoHistoria = false;
    return;
  }

  if (checking) return;  

  int x = (mouseX - offsetX) / cardSize;
  int y = (mouseY - offsetY) / cardSize;

  if (x >= 0 && x < cols && y >= 0 && y < rows && !revealed[x][y]) {
    revealed[x][y] = true;  

    if (firstPick[0] == -1) {
      firstPick[0] = x;
      firstPick[1] = y;
    } 
    else if (secondPick[0] == -1) {
      secondPick[0] = x;
      secondPick[1] = y;
      checking = true;  
      checkTime = millis();  
    }
  }
}

void drawBoard() {
  for (int i = 0; i < cols; i++) {
    for (int j = 0; j < rows; j++) {
      int x = offsetX + i * cardSize;
      int y = offsetY + j * cardSize;
      
      stroke(0);
      fill(255);
      rect(x, y, cardSize, cardSize);

      if (revealed[i][j]) {
        fill(0);
        textSize(32);
        textAlign(CENTER, CENTER);
        text(board[i][j], x + cardSize / 2, y + cardSize / 2);
      } else {
        fill(150);  
        rect(x + 5, y + 5, cardSize - 10, cardSize - 10);
      }
    }
  }
}

void checkMatch() {
  String first = board[firstPick[0]][firstPick[1]];
  String second = board[secondPick[0]][secondPick[1]];
  
  if (!first.equals(second)) {
    revealed[firstPick[0]][firstPick[1]] = false;
    revealed[secondPick[0]][secondPick[1]] = false;
  } else {
    matches++;
  }

  firstPick[0] = -1;
  secondPick[0] = -1;
}

String[] generateValues() {
  String[] vals = new String[cols * rows];
  String[] emojis = {":)",":(",":P",":O","'-.-","O.O","XD",":/"}; // 8 pares
  int index = 0;
  for (int i = 0; i < emojis.length; i++) {
    vals[index++] = emojis[i];
    vals[index++] = emojis[i];
  }
  shuffleArray(vals); 
  return vals;  
}

void shuffleArray(String[] array) {
  for (int i = array.length - 1; i > 0; i--) {
    int j = (int) random(i + 1);  
    String temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
}

void fillBoard() {
  int index = 0;
  for (int i = 0; i < cols; i++) {
    for (int j = 0; j < rows; j++) {
      board[i][j] = values[index];  
      index++;
    }
  }
}

void reiniciarJogo() {
  values = generateValues();
  fillBoard();
  revealed = new boolean[cols][rows];

  firstPick[0] = -1;
  firstPick[1] = -1;
  secondPick[0] = -1;
  secondPick[1] = -1;

  checking = false;
  matches = 0;

  loop();
}
