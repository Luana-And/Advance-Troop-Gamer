int cols = 40;
int rows = 40;
int cellSize = 20;
int menuButtonX, menuButtonY, menuButtonW = 150, menuButtonH = 40;
int pontos = 0;

Snake snake;
PVector food;
PVector comidaEspecial;
boolean mostrarComidaEspecial = false;
int tempoComidaEspecial = 0;

ArrayList<PVector> obstaculos = new ArrayList<PVector>();
boolean gameOver = false;
boolean jogoIniciado = false;
boolean mostrarMenu = true;

String historia = 
  "Há muito tempo, em uma floresta mágica,\n" +
  "vive uma jovem cobra chamada Luma.\n" +
  "Luma precisa comer muito para ganhar forças\n" +
  "e proteger a floresta das sombras que se aproximam.\n" +
  "Ajude Luma a crescer forte comendo o máximo que puder!";

int dificuldade = 1; // 0 = fácil, 1 = normal, 2 = difícil

int buttonX, buttonY, buttonW = 150, buttonH = 40;

void settings() {
  size(cols * cellSize, rows * cellSize);
}

void setup() {
  frameRate(8);
}

void draw() {
  background(0);
  
  fill(255);
  textSize(16);
  textAlign(LEFT, TOP);
  text("Pontos: " + pontos, 10, 10);

  if (mostrarMenu) {
    mostrarTelaInicial();
    return;
  }

  if (!jogoIniciado) return;

  if (!gameOver) {
    snake.move();
    snake.checkCollision();
    snake.show();

    // Comida normal
    fill(255, 0, 0);
    rect(food.x * cellSize, food.y * cellSize, cellSize, cellSize);

    // Comida especial
    if (mostrarComidaEspecial) {
      fill(0, 100, 255);
      rect(comidaEspecial.x * cellSize, comidaEspecial.y * cellSize, cellSize, cellSize);
      tempoComidaEspecial--;
      if (tempoComidaEspecial <= 0) {
        mostrarComidaEspecial = false;
      }
    }

    // Obstáculos
    fill(150);
    for (PVector o : obstaculos) {
      rect(o.x * cellSize, o.y * cellSize, cellSize, cellSize);
    }

    // Comer comida normal
    if (snake.head().equals(food)) {
      snake.grow();
      pontos += 10;
      spawnFood();
    }

    // Comer comida especial
    if (mostrarComidaEspecial && snake.head().equals(comidaEspecial)) {
      for (int i = 0; i < 3; i++) snake.grow();
      pontos += 30;
      mostrarComidaEspecial = false;
    }

    // Spawn comida especial de tempos em tempos
    if (frameCount % 100 == 0 && !mostrarComidaEspecial) {
      spawnComidaEspecial();
    }

  } else {
    mostrarGameOver();
  }
}

void mostrarTelaInicial() {
  fill(255);
  textAlign(CENTER);
  textSize(18);
  text(historia, width / 2, 80);

  textSize(20);
  button("FÁCIL", width / 2 - 75, 200, () -> iniciarComDificuldade(0));
  button("NORMAL", width / 2 - 75, 260, () -> iniciarComDificuldade(1));
  button("DIFÍCIL", width / 2 - 75, 320, () -> iniciarComDificuldade(2));
}

void button(String label, int x, int y, Runnable onClick) {
  int w = 150, h = 40;
  fill(50, 200, 50);
  rect(x, y, w, h, 10);

  fill(255);
  textSize(20);
  textAlign(CENTER, CENTER);
  text(label, x + w / 2, y + h / 2);

  if (mousePressed &&
      mouseX >= x && mouseX <= x + w &&
      mouseY >= y && mouseY <= y + h) {
    delay(200);
    onClick.run();
  }
}

void iniciarComDificuldade(int nivel) {
  dificuldade = nivel;
  frameRate(nivel == 0 ? 5 : nivel == 1 ? 8 : 12);
  iniciarJogo();
  jogoIniciado = true;
  mostrarMenu = false;
}

void iniciarJogo() {
  snake = new Snake();
  spawnFood();
  mostrarComidaEspecial = false;
  tempoComidaEspecial = 0;
  gameOver = false;
  pontos = 0;
  spawnObstaculos(dificuldade == 0 ? 3 : dificuldade == 1 ? 7 : 12);
  loop();
}

void spawnFood() {
  food = new PVector(floor(random(cols)), floor(random(rows)));
  while (snake.contains(food) || obstaculos.contains(food)) {
    food = new PVector(floor(random(cols)), floor(random(rows)));
  }
}

void spawnComidaEspecial() {
  comidaEspecial = new PVector(floor(random(cols)), floor(random(rows)));
  while (snake.contains(comidaEspecial) || comidaEspecial.equals(food) || obstaculos.contains(comidaEspecial)) {
    comidaEspecial = new PVector(floor(random(cols)), floor(random(rows)));
  }
  mostrarComidaEspecial = true;
  tempoComidaEspecial = 80;
}

void spawnObstaculos(int quantidade) {
  obstaculos.clear();
  for (int i = 0; i < quantidade; i++) {
    PVector o = new PVector(floor(random(cols)), floor(random(rows)));
    while (snake.contains(o) || o.equals(food)) {
      o = new PVector(floor(random(cols)), floor(random(rows)));
    }
    obstaculos.add(o);
  }
}

void keyPressed() {
  if (!jogoIniciado || gameOver) return;

  if ((key == 'w' || key == 'W') && snake.ydir != 1) {
    snake.setDir(0, -1);
  } else if ((key == 's' || key == 'S') && snake.ydir != -1) {
    snake.setDir(0, 1);
  } else if ((key == 'a' || key == 'A') && snake.xdir != 1) {
    snake.setDir(-1, 0);
  } else if ((key == 'd' || key == 'D') && snake.xdir != -1) {
    snake.setDir(1, 0);
  }
}

void mousePressed() {
  if (gameOver) {
    if (mouseX >= buttonX && mouseX <= buttonX + buttonW &&
        mouseY >= buttonY && mouseY <= buttonY + buttonH) {
      iniciarJogo();
    } else if (mouseX >= menuButtonX && mouseX <= menuButtonX + menuButtonW && 
               mouseY >= menuButtonY && mouseY <= menuButtonY + menuButtonH) {
      gameOver = false;
      jogoIniciado = false;
      mostrarMenu = true;
    }
  }
}

void mostrarGameOver() {
  fill(255, 0, 0);
  textSize(32);
  textAlign(CENTER, CENTER);
  text("Game Over!", width / 2, height / 2 - 60);

  buttonX = width / 2 - buttonW - 10;
  buttonY = height / 2;
  fill(50, 200, 50);
  rect(buttonX, buttonY, buttonW, buttonH, 10);
  fill(255);
  textSize(20);
  text("Reiniciar", buttonX + buttonW / 2, buttonY + buttonH / 2);

  menuButtonX = width / 2 + 10;
  menuButtonY = buttonY;
  fill(50, 150, 200);
  rect(menuButtonX, menuButtonY, menuButtonW, menuButtonH, 10);
  fill(255);
  text("Menu", menuButtonX + menuButtonW / 2, menuButtonY + menuButtonH / 2);
}

// Classe Snake
class Snake {
  ArrayList<PVector> body;
  int xdir = 1;
  int ydir = 0;

  Snake() {
    body = new ArrayList<PVector>();
    body.add(new PVector(floor(cols / 2), floor(rows / 2)));
  }

  void setDir(int x, int y) {
    if (body.size() > 1) {
      PVector head = body.get(0);
      PVector neck = body.get(1);
      if (head.x + x == neck.x && head.y + y == neck.y) return;
    }
    xdir = x;
    ydir = y;
  }

  void move() {
    if (xdir == 0 && ydir == 0) return;
    PVector head = body.get(0).copy();
    head.x += xdir;
    head.y += ydir;
    body.add(0, head);
    body.remove(body.size() - 1);
  }

  void grow() {
    PVector head = body.get(0).copy();
    head.x += xdir;
    head.y += ydir;
    body.add(0, head);
  }

  void show() {
    fill(0, 255, 0);
    for (PVector part : body) {
      rect(part.x * cellSize, part.y * cellSize, cellSize, cellSize);
    }
  }

  PVector head() {
    return body.get(0);
  }

  boolean contains(PVector pos) {
    for (PVector part : body) {
      if (part.equals(pos)) return true;
    }
    return false;
  }

  void checkCollision() {
    PVector head = body.get(0);
    if (head.x < 0 || head.x >= cols || head.y < 0 || head.y >= rows) {
      encerrarJogo();
    }

    for (int i = 1; i < body.size(); i++) {
      if (head.equals(body.get(i))) {
        encerrarJogo();
      }
    }

    for (PVector o : obstaculos) {
      if (head.equals(o)) {
        encerrarJogo();
      }
    }
  }

  void encerrarJogo() {
    gameOver = true;
  }
}
